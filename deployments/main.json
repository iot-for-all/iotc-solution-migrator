{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.11.1.770",
      "templateHash": "10365760288758727178"
    }
  },
  "parameters": {
    "projectName": {
      "type": "string",
      "defaultValue": "contoso",
      "maxLength": 11,
      "minLength": 1,
      "metadata": {
        "description": "Define the project name or prefix for all objects."
      }
    },
    "iotcAppUrl": {
      "type": "string",
      "metadata": {
        "description": "The Azure IoT Central app URL"
      }
    },
    "iotcApiKey": {
      "type": "secureString",
      "metadata": {
        "description": "The Azure IoT Central API Key"
      }
    }
  },
  "variables": {
    "location": "[resourceGroup().location]",
    "enrollmentGroupId": "[take(format('{0}dps{1}eg', parameters('projectName'), uniqueString(resourceGroup().id)), 20)]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "identity",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "projectName": {
            "value": "[parameters('projectName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "6682472625529452827"
            }
          },
          "parameters": {
            "projectName": {
              "type": "string",
              "defaultValue": "contoso",
              "maxLength": 11,
              "minLength": 1,
              "metadata": {
                "description": "Define the project name or prefix for all objects."
              }
            }
          },
          "variables": {
            "ownerRoleId": "8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
            "grafanaAdminRoleId": "22926164-76b3-42b3-bc55-97df8dab3e41",
            "userId": "[take(format('{0}id{1}', parameters('projectName'), uniqueString(resourceGroup().id)), 20)]",
            "ownerRoleAssignment": "[guid(variables('userId'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('ownerRoleId')))]",
            "rgRoleAssignment": "[guid(resourceGroup().name, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('ownerRoleId')))]",
            "grafanaRoleAssignment": "[guid(resourceGroup().name, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('grafanaAdminRoleId')))]"
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2022-01-31-preview",
              "name": "[variables('userId')]",
              "location": "[resourceGroup().location]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', variables('userId'))]",
              "name": "[variables('ownerRoleAssignment')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('ownerRoleId'))]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userId'))).principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userId'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[variables('rgRoleAssignment')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('ownerRoleId'))]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userId'))).principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userId'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[variables('grafanaRoleAssignment')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('grafanaAdminRoleId'))]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userId'))).principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userId'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userId'))]"
            },
            "name": {
              "type": "string",
              "value": "[variables('userId')]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userId'))).principalId]"
            },
            "clientId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userId'))).clientId]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "storage",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "projectName": {
            "value": "[parameters('projectName')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "identityId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'identity')).outputs.id.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "1221152622407931348"
            }
          },
          "parameters": {
            "projectName": {
              "type": "string",
              "defaultValue": "contoso",
              "maxLength": 11,
              "minLength": 1,
              "metadata": {
                "description": "Define the project name or prefix for all objects."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "identityId": {
              "type": "string",
              "metadata": {
                "description": "The user managed identity id"
              }
            }
          },
          "variables": {
            "accountName": "[take(format('{0}sa{1}', parameters('projectName'), uniqueString(resourceGroup().id)), 20)]"
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}/{1}/{2}', variables('accountName'), 'default', 'tables')]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', variables('accountName'), 'default')]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}/{1}', variables('accountName'), 'default')]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('accountName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-05-01",
              "name": "[variables('accountName')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('identityId'))]": {}
                }
              },
              "sku": {
                "name": "Standard_LRS"
              },
              "kind": "StorageV2"
            }
          ],
          "outputs": {
            "AccountName": {
              "type": "string",
              "value": "[variables('accountName')]"
            },
            "AccountId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('accountName'))]"
            },
            "AccountKey": {
              "type": "string",
              "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('accountName')), '2022-05-01').keys[0].value]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "iot",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[variables('location')]"
          },
          "projectName": {
            "value": "[parameters('projectName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "16431363319759267692"
            }
          },
          "parameters": {
            "projectName": {
              "type": "string",
              "defaultValue": "contoso",
              "maxLength": 11,
              "minLength": 1,
              "metadata": {
                "description": "Define the project name or prefix for all objects."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "S1",
              "metadata": {
                "description": "The SKU to use for the IoT Hub."
              }
            },
            "skuUnits": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "The number of IoT Hub units."
              }
            },
            "d2cPartitions": {
              "type": "int",
              "defaultValue": 4,
              "metadata": {
                "description": "Partitions used for the event stream."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            }
          },
          "variables": {
            "iotHubName": "[take(format('{0}hub{1}', parameters('projectName'), uniqueString(resourceGroup().id)), 20)]",
            "dpsName": "[take(format('{0}dps{1}', parameters('projectName'), uniqueString(resourceGroup().id)), 20)]"
          },
          "resources": [
            {
              "type": "Microsoft.Devices/IotHubs",
              "apiVersion": "2021-07-02",
              "name": "[variables('iotHubName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('skuName')]",
                "capacity": "[parameters('skuUnits')]"
              },
              "properties": {
                "eventHubEndpoints": {
                  "events": {
                    "retentionTimeInDays": 1,
                    "partitionCount": "[parameters('d2cPartitions')]"
                  }
                },
                "routing": {
                  "routes": [
                    {
                      "name": "Telemetry",
                      "source": "DeviceMessages",
                      "endpointNames": [
                        "events"
                      ],
                      "isEnabled": true
                    },
                    {
                      "name": "DeviceTwin",
                      "source": "TwinChangeEvents",
                      "endpointNames": [
                        "events"
                      ],
                      "isEnabled": true
                    },
                    {
                      "name": "DigitalTwinChange",
                      "source": "DigitalTwinChangeEvents",
                      "endpointNames": [
                        "events"
                      ],
                      "isEnabled": true
                    }
                  ],
                  "enrichments": [
                    {
                      "endpointNames": [
                        "events"
                      ],
                      "key": "modelId",
                      "value": "$twin.tags.modelId"
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Devices/provisioningServices",
              "apiVersion": "2021-10-15",
              "name": "[variables('dpsName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('skuName')]",
                "capacity": "[parameters('skuUnits')]"
              },
              "properties": {
                "iotHubs": [
                  {
                    "connectionString": "[format('HostName={0};SharedAccessKeyName=iothubowner;SharedAccessKey={1}', reference(resourceId('Microsoft.Devices/IotHubs', variables('iotHubName'))).hostName, listkeys(resourceId('Microsoft.Devices/IotHubs', variables('iotHubName')), '2021-07-02').value[0].primaryKey)]",
                    "location": "[parameters('location')]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Devices/IotHubs', variables('iotHubName'))]"
              ]
            }
          ],
          "outputs": {
            "ScopeId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Devices/provisioningServices', variables('dpsName'))).idScope]"
            },
            "EventHubCS": {
              "type": "string",
              "value": "[format('Endpoint={0};SharedAccessKeyName=iothubowner;SharedAccessKey={1}', reference(resourceId('Microsoft.Devices/IotHubs', variables('iotHubName'))).eventHubEndpoints.events.endpoint, listkeys(resourceId('Microsoft.Devices/IotHubs', variables('iotHubName')), '2021-07-02').value[0].primaryKey)]"
            },
            "EventHubName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Devices/IotHubs', variables('iotHubName'))).eventHubEndpoints.events.path]"
            },
            "HubOwnerCS": {
              "type": "string",
              "value": "[format('HostName={0};SharedAccessKeyName=iothubowner;SharedAccessKey={1}', reference(resourceId('Microsoft.Devices/IotHubs', variables('iotHubName'))).hostName, listkeys(resourceId('Microsoft.Devices/IotHubs', variables('iotHubName')), '2021-07-02').value[0].primaryKey)]"
            },
            "DPSName": {
              "type": "string",
              "value": "[variables('dpsName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "sql",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "projectName": {
            "value": "[parameters('projectName')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "identity": {
            "value": {
              "name": "[reference(resourceId('Microsoft.Resources/deployments', 'identity')).outputs.name.value]",
              "clientId": "[reference(resourceId('Microsoft.Resources/deployments', 'identity')).outputs.clientId.value]",
              "principalId": "[reference(resourceId('Microsoft.Resources/deployments', 'identity')).outputs.principalId.value]",
              "Id": "[reference(resourceId('Microsoft.Resources/deployments', 'identity')).outputs.id.value]"
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "16518977823989192346"
            }
          },
          "parameters": {
            "projectName": {
              "type": "string",
              "defaultValue": "contoso",
              "maxLength": 11,
              "minLength": 1,
              "metadata": {
                "description": "Define the project name or prefix for all objects."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "identity": {
              "type": "object",
              "metadata": {
                "description": "The user managed identity id"
              }
            }
          },
          "variables": {
            "serverName": "[take(format('{0}sql{1}', parameters('projectName'), uniqueString(resourceGroup().id)), 20)]",
            "databaseName": "solutiondb",
            "adminLoginUsername": "solutionsqladmin",
            "adminLoginPassword": "[format('{0}_{1}@', toUpper(take(parameters('projectName'), 4)), take(uniqueString(resourceGroup().id), 8))]"
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers/databases",
              "apiVersion": "2022-05-01-preview",
              "name": "[format('{0}/{1}', variables('serverName'), variables('databaseName'))]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('identity').Id)]": {}
                }
              },
              "sku": {
                "name": "GP_S_Gen5",
                "tier": "GeneralPurpose",
                "capacity": 1,
                "family": "Gen5"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', variables('serverName'))]"
              ]
            },
            {
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2022-05-01-preview",
              "name": "[format('{0}/{1}', variables('serverName'), 'AllowAllWindowsAzureIps')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "0.0.0.0"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', variables('serverName'))]"
              ]
            },
            {
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2022-05-01-preview",
              "name": "[format('{0}/{1}', variables('serverName'), 'AllowAll-Unsafe')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "255.255.255.255"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', variables('serverName'))]"
              ]
            },
            {
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2022-05-01-preview",
              "name": "[variables('serverName')]",
              "location": "[parameters('location')]",
              "properties": {
                "administratorLogin": "[variables('adminLoginUsername')]",
                "administratorLoginPassword": "[variables('adminLoginPassword')]",
                "minimalTlsVersion": "1.2",
                "restrictOutboundNetworkAccess": "Disabled",
                "publicNetworkAccess": "Enabled",
                "version": "12.0"
              }
            }
          ],
          "outputs": {
            "sql": {
              "type": "object",
              "value": {
                "Endpoint": "[reference(resourceId('Microsoft.Sql/servers', variables('serverName'))).fullyQualifiedDomainName]",
                "Database": "[variables('databaseName')]",
                "Username": "[variables('adminLoginUsername')]",
                "Password": "[variables('adminLoginPassword')]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'iot')]",
        "[resourceId('Microsoft.Resources/deployments', 'identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "func",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[variables('location')]"
          },
          "iothubEventHubCS": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'iot')).outputs.EventHubCS.value]"
          },
          "iothubOwnerCS": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'iot')).outputs.HubOwnerCS.value]"
          },
          "sql": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'sql')).outputs.sql.value]"
          },
          "storageId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage')).outputs.AccountId.value]"
          },
          "storageAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage')).outputs.AccountName.value]"
          },
          "projectName": {
            "value": "[parameters('projectName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "708164988929857131"
            }
          },
          "parameters": {
            "projectName": {
              "type": "string",
              "defaultValue": "contoso",
              "maxLength": 11,
              "minLength": 1,
              "metadata": {
                "description": "Define the project name or prefix for all objects."
              }
            },
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "The storage account name."
              }
            },
            "storageId": {
              "type": "string",
              "metadata": {
                "description": "The storage resource Id"
              }
            },
            "sql": {
              "type": "object",
              "metadata": {
                "description": "Sql server details."
              }
            },
            "iothubEventHubCS": {
              "type": "secureString",
              "metadata": {
                "description": "IoTHub EventHub endpoint Connection string."
              }
            },
            "iothubOwnerCS": {
              "type": "secureString",
              "metadata": {
                "description": "IoTHub Owner connection string."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            }
          },
          "variables": {
            "hostingName": "[take(format('{0}host{1}', parameters('projectName'), uniqueString(resourceGroup().id)), 20)]",
            "functionName": "[take(format('{0}fn{1}', parameters('projectName'), uniqueString(resourceGroup().id)), 20)]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2022-03-01",
              "name": "[variables('hostingName')]",
              "location": "[parameters('location')]",
              "kind": "functionapp,linux",
              "sku": {
                "tier": "Dynamic",
                "name": "Y1",
                "size": "Y1",
                "family": "Y1",
                "capacity": 0
              },
              "properties": {
                "reserved": true
              }
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2022-03-01",
              "name": "[variables('functionName')]",
              "location": "[parameters('location')]",
              "kind": "functionapp,linux",
              "properties": {
                "httpsOnly": true,
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingName'))]",
                "isXenon": false,
                "hyperV": false,
                "siteConfig": {
                  "linuxFxVersion": "node|16",
                  "cors": {
                    "allowedOrigins": [
                      "*"
                    ],
                    "supportCredentials": false
                  },
                  "appSettings": [
                    {
                      "name": "AzureWebJobsStorage",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', parameters('storageAccountName'), environment().suffixes.storage, listKeys(parameters('storageId'), '2022-05-01').keys[0].value)]"
                    },
                    {
                      "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', parameters('storageAccountName'), environment().suffixes.storage, listKeys(parameters('storageId'), '2022-05-01').keys[0].value)]"
                    },
                    {
                      "name": "FUNCTIONS_EXTENSION_VERSION",
                      "value": "~4"
                    },
                    {
                      "name": "WEBSITE_NODE_DEFAULT_VERSION",
                      "value": "~16"
                    },
                    {
                      "name": "FUNCTIONS_WORKER_RUNTIME",
                      "value": "node"
                    },
                    {
                      "name": "SQL_ENDPOINT",
                      "value": "[parameters('sql').Endpoint]"
                    },
                    {
                      "name": "SQL_DATABASE",
                      "value": "[parameters('sql').Database]"
                    },
                    {
                      "name": "IoTHubEventHubCS",
                      "value": "[parameters('iothubEventHubCS')]"
                    },
                    {
                      "name": "IoTHubOwnerCS",
                      "value": "[parameters('iothubOwnerCS')]"
                    },
                    {
                      "name": "SQL_USERNAME",
                      "value": "[parameters('sql').Username]"
                    },
                    {
                      "name": "SQL_PASSWORD",
                      "value": "[parameters('sql').Password]"
                    },
                    {
                      "name": "SqlConnectionString",
                      "value": "[format('Server=tcp:{0},1433;Initial Catalog={1};Persist Security Info=False;User ID={2};Password={3};', parameters('sql').Endpoint, parameters('sql').Database, parameters('sql').Username, parameters('sql').Password)]"
                    }
                  ],
                  "minTlsVersion": "1.2"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('hostingName'))]"
              ]
            }
          ],
          "outputs": {
            "FunctionName": {
              "type": "string",
              "value": "[variables('functionName')]"
            },
            "FunctionUrl": {
              "type": "string",
              "value": "[format('https://{0}/api/ModelParser?code={1}', reference(resourceId('Microsoft.Web/sites', variables('functionName'))).defaultHostName, listKeys(format('{0}/host/default', resourceId('Microsoft.Web/sites', variables('functionName'))), '2022-03-01').functionKeys.default)]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'iot')]",
        "[resourceId('Microsoft.Resources/deployments', 'sql')]",
        "[resourceId('Microsoft.Resources/deployments', 'storage')]",
        "[resourceId('Microsoft.Resources/deployments', 'identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "grafana",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "projectName": {
            "value": "[parameters('projectName')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "identity": {
            "value": {
              "Id": "[reference(resourceId('Microsoft.Resources/deployments', 'identity')).outputs.id.value]",
              "clientId": "[reference(resourceId('Microsoft.Resources/deployments', 'identity')).outputs.clientId.value]"
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "6854012241302790205"
            }
          },
          "parameters": {
            "projectName": {
              "type": "string",
              "metadata": {
                "description": "The project name to be used for naming generation"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "identity": {
              "type": "object"
            }
          },
          "variables": {
            "name": "[take(format('{0}dash{1}', parameters('projectName'), uniqueString(resourceGroup().id)), 20)]"
          },
          "resources": [
            {
              "type": "Microsoft.Dashboard/grafana",
              "apiVersion": "2022-08-01",
              "name": "[variables('name')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard"
              },
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('identity').Id)]": {}
                }
              },
              "properties": {
                "apiKey": "Enabled",
                "deterministicOutboundIP": "Disabled",
                "publicNetworkAccess": "Enabled",
                "zoneRedundancy": "Disabled"
              }
            }
          ],
          "outputs": {
            "endpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Dashboard/grafana', variables('name'))).endpoint]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'sql')]",
        "[resourceId('Microsoft.Resources/deployments', 'identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "script",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "functionName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'func')).outputs.FunctionName.value]"
          },
          "identity": {
            "value": {
              "Id": "[reference(resourceId('Microsoft.Resources/deployments', 'identity')).outputs.id.value]",
              "name": "[reference(resourceId('Microsoft.Resources/deployments', 'identity')).outputs.name.value]"
            }
          },
          "storageAccountKey": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage')).outputs.AccountKey.value]"
          },
          "storageAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage')).outputs.AccountName.value]"
          },
          "projectName": {
            "value": "[parameters('projectName')]"
          },
          "dpsResourceName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'iot')).outputs.DPSName.value]"
          },
          "functionUrl": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'func')).outputs.FunctionUrl.value]"
          },
          "iotcApiKey": {
            "value": "[parameters('iotcApiKey')]"
          },
          "iotcAppUrl": {
            "value": "[parameters('iotcAppUrl')]"
          },
          "sqlDatabase": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'sql')).outputs.sql.value.Database]"
          },
          "sqlEndpoint": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'sql')).outputs.sql.value.Endpoint]"
          },
          "sqlUserName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'sql')).outputs.sql.value.Username]"
          },
          "sqlPassword": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'sql')).outputs.sql.value.Password]"
          },
          "eventHubName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'iot')).outputs.EventHubName.value]"
          },
          "grafanaEndpoint": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'grafana')).outputs.endpoint.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "4844057502073746010"
            }
          },
          "parameters": {
            "iotcApiKey": {
              "type": "string"
            },
            "iotcAppUrl": {
              "type": "string"
            },
            "identity": {
              "type": "object"
            },
            "sqlEndpoint": {
              "type": "string"
            },
            "sqlDatabase": {
              "type": "string"
            },
            "sqlUserName": {
              "type": "string"
            },
            "sqlPassword": {
              "type": "secureString"
            },
            "functionName": {
              "type": "string"
            },
            "functionUrl": {
              "type": "string"
            },
            "eventHubName": {
              "type": "string"
            },
            "grafanaEndpoint": {
              "type": "string"
            },
            "dpsResourceName": {
              "type": "string"
            },
            "projectName": {
              "type": "string",
              "defaultValue": "contoso"
            },
            "storageAccountKey": {
              "type": "secureString"
            },
            "storageAccountName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-configscript', parameters('projectName'))]",
              "kind": "AzureCLI",
              "location": "[resourceGroup().location]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('identity').Id)]": {}
                }
              },
              "properties": {
                "storageAccountSettings": {
                  "storageAccountKey": "[parameters('storageAccountKey')]",
                  "storageAccountName": "[parameters('storageAccountName')]"
                },
                "azCliVersion": "2.41.0",
                "cleanupPreference": "OnExpiration",
                "timeout": "PT2H",
                "retentionInterval": "P1D",
                "primaryScriptUri": "https://raw.githubusercontent.com/lucadruda/iotc-solution-migrator/main/deployments/scripts/config.sh",
                "environmentVariables": [
                  {
                    "name": "SUBSCRIPTION_ID",
                    "value": "[subscription().subscriptionId]"
                  },
                  {
                    "name": "FUNCTIONAPP_NAME",
                    "value": "[parameters('functionName')]"
                  },
                  {
                    "name": "FUNCTIONAPP_URL",
                    "value": "[parameters('functionUrl')]"
                  },
                  {
                    "name": "RESOURCE_GROUP",
                    "value": "[resourceGroup().name]"
                  },
                  {
                    "name": "REPO_URL",
                    "value": "https://github.com/lucadruda/iotc-solution-migrator"
                  },
                  {
                    "name": "REPO_BRANCH",
                    "value": "main"
                  },
                  {
                    "name": "IOTC_API_KEY",
                    "value": "[parameters('iotcApiKey')]"
                  },
                  {
                    "name": "IOTC_APP_URL",
                    "value": "[parameters('iotcAppUrl')]"
                  },
                  {
                    "name": "DPS_RESOURCE_NAME",
                    "value": "[parameters('dpsResourceName')]"
                  },
                  {
                    "name": "DPS_ENROLLMENT_NAME",
                    "value": "[uniqueString(parameters('projectName'), 'saskeys', resourceGroup().name)]"
                  },
                  {
                    "name": "IDENTITY_NAME",
                    "value": "[parameters('identity').name]"
                  },
                  {
                    "name": "SQL_ENDPOINT",
                    "value": "[parameters('sqlEndpoint')]"
                  },
                  {
                    "name": "SQL_DATABASE",
                    "value": "[parameters('sqlDatabase')]"
                  },
                  {
                    "name": "SQL_USERNAME",
                    "value": "[parameters('sqlUserName')]"
                  },
                  {
                    "name": "SQL_PASSWORD",
                    "value": "[parameters('sqlPassword')]"
                  },
                  {
                    "name": "EVENTHUB_NAME",
                    "value": "[parameters('eventHubName')]"
                  },
                  {
                    "name": "GRAFANA_ENDPOINT",
                    "value": "[parameters('grafanaEndpoint')]"
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'func')]",
        "[resourceId('Microsoft.Resources/deployments', 'grafana')]",
        "[resourceId('Microsoft.Resources/deployments', 'iot')]",
        "[resourceId('Microsoft.Resources/deployments', 'sql')]",
        "[resourceId('Microsoft.Resources/deployments', 'storage')]",
        "[resourceId('Microsoft.Resources/deployments', 'identity')]"
      ]
    }
  ],
  "outputs": {
    "FunctionUrl": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'func')).outputs.FunctionUrl.value]"
    },
    "ScopeId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'iot')).outputs.ScopeId.value]"
    }
  }
}